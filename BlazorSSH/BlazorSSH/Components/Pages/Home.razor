@page "/"
@using Renci.SshNet
@using System.Text
@inject IJSRuntime JSRuntime

<div class="terminal">
    <div class="terminal-header">
        <span class="terminal-button close"></span>
        <span class="terminal-button minimize"></span>
        <span class="terminal-button maximize"></span>
    </div>
    <div class="terminal-body">
        @if (!isConnected)
        {
            <div class="login-prompt">
                <p>Last login: @DateTime.Now.ToString("ddd MMM dd HH:mm:ss") on ttys000</p>
                <p>user@localhost:~$ ssh @(string.IsNullOrEmpty(username) ? "user@host" : $"{username}@{host}")</p>
                <p>
                    <span class="input-prompt">Host: </span>
                    <input @bind="host" @bind:event="oninput" />
                </p>
                <p>
                    <span class="input-prompt">Username: </span>
                    <input @bind="username" @bind:event="oninput" />
                </p>
                <p>
                    <span class="input-prompt">Password: </span>
                    <input type="password" @bind="password" @bind:event="oninput" />
                </p>
                <p>
                    <button @onclick="Connect" class="connect-button">Connect</button>
                </p>
            </div>
        }
        else
        {
            <div class="terminal-output">
                @foreach (var line in outputLines)
                {
                    <pre>@line</pre>
                }
            </div>
            <div class="terminal-input">
                <span class="prompt">@prompt</span>
                <input @bind="currentCommand" @bind:event="oninput" @onkeydown="HandleKeyDown" />
            </div>
        }
    </div>
</div>

<style>
    .terminal {
        font-family: 'Courier New', Courier, monospace;
        background-color: #300a24;
        color: #ffffff;
        width: 600px;
        height: 400px;
        border-radius: 5px;
        overflow: hidden;
        box-shadow: 0 0 10px rgba(0,0,0,0.5);
    }

    .terminal-header {
        background-color: #4a0d37;
        padding: 5px;
        display: flex;
        justify-content: flex-start;
    }

    .terminal-button {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }

    .close { background-color: #ff5f56; }
    .minimize { background-color: #ffbd2e; }
    .maximize { background-color: #27c93f; }

    .terminal-body {
        padding: 10px;
        height: calc(100% - 30px);
        overflow-y: auto;
    }

    .login-prompt p {
        margin: 5px 0;
    }

    .input-prompt {
        color: #50fa7b;
    }

    input {
        background-color: transparent;
        border: none;
        color: #f8f8f2;
        font-family: inherit;
        font-size: inherit;
    }

    input:focus {
        outline: none;
    }

    .connect-button {
        background-color: #50fa7b;
        color: #282a36;
        border: none;
        padding: 5px 10px;
        border-radius: 3px;
        cursor: pointer;
        font-family: inherit;
        font-size: inherit;
        margin-top: 10px;
    }

    .connect-button:hover {
        background-color: #69ff9a;
    }

    .terminal-output {
        margin-bottom: 10px;
    }

    .terminal-input {
        display: flex;
        align-items: center;
    }

    .prompt {
        color: #50fa7b;
        margin-right: 5px;
    }

    pre {
        margin: 0;
        white-space: pre-wrap;
    }
</style>

@code {
    private string host = "";
    private string username = "";
    private string password = "";
    private bool isConnected = false;
    private SshClient sshClient;
    private ShellStream shellStream;
    private List<string> outputLines = new List<string>();
    private string currentCommand = "";
    private string prompt = "$ ";
    private StringBuilder outputBuffer = new StringBuilder();

    private async Task Connect()
    {
        try
        {
            sshClient = new SshClient(host, username, password);
            sshClient.Connect();
            shellStream = sshClient.CreateShellStream("xterm", 80, 24, 800, 600, 1024);
            isConnected = true;
            _ = ReadOutput(); // Start reading output asynchronously
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Connection error: {ex.Message}");
        }
    }

    private async Task ReadOutput()
    {
        byte[] buffer = new byte[1024];
        while (isConnected)
        {
            if (shellStream.DataAvailable)
            {
                int bytesRead = await shellStream.ReadAsync(buffer, 0, buffer.Length);
                string output = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                outputBuffer.Append(output);

                // Process complete lines
                int newlineIndex;
                while ((newlineIndex = outputBuffer.ToString().IndexOf('\n')) >= 0)
                {
                    string line = outputBuffer.ToString(0, newlineIndex).TrimEnd('\r', '\n');
                    outputLines.Add(line);
                    outputBuffer.Remove(0, newlineIndex + 1);
                }

                StateHasChanged();
            }
            else
            {
                await Task.Delay(100);
            }
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ExecuteCommand();
        }
    }

    private async Task ExecuteCommand()
    {
        if (string.IsNullOrWhiteSpace(currentCommand)) return;

        shellStream.WriteLine(currentCommand);
        currentCommand = "";
        await Task.Delay(100); // Give some time for the command to execute
        StateHasChanged();
    }

    public void Dispose()
    {
        isConnected = false;
        shellStream?.Dispose();
        sshClient?.Dispose();
    }
}
<style>
    .terminal {
        background-color: black;
        color: white;
        padding: 10px;
        font-family: monospace;
    }

    .terminal-output {
        height: 300px;
        overflow-y: auto;
    }

    .terminal-input {
        display: flex;
        align-items: center;
    }

    .prompt {
        margin-right: 5px;
    }

    .terminal-input input {
        background-color: black;
        color: white;
        border: none;
        flex-grow: 1;
    }
</style>